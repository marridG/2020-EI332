// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/24/2020 18:55:16"
                                                                                
// Verilog Test Bench template for design : mod_18_adder_en
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps

module mod_18_adder_en_vlg_tst();
	// constants                                           
	// general purpose registers
	reg eachvec;
	// test vector input registers
	reg clk;
	reg en;
	reg rst;
	// wires                                               
	wire carry;
	wire [4:0]  out;

	// assign statements (if any)                          
	mod_18_adder_en i1 (
	// port map - connection between master ports and signals/registers   
		.carry(carry),
		.clk(clk),
		.en(en),
		.out(out),
		.rst(rst)
	);


	initial 			// code that executes only once
	begin          
		clk = 0;		// let CLK initially be 0
		rst = 1'b1;		// reset
		en = 0;			// disable initially
		
		#10 rst = 1'b0;
		#100 en = 1;
		
		#100 rst = 1'b1;		// reset
		#100 rst = 1'b0;

		#3000 en = 0;			// disable

		$display("Running testbench");                       
	end                                                    
	
	always #50 clk = ~ clk;
	
	always                                                 
	// optional sensitivity list                           
	// @(event1 or event2 or .... eventn)                  
	begin                                                  
	// code executes for every event on sensitivity list   
		@eachvec;                                              
	end 


endmodule

